import tslint from 'typescript-eslint'

import {
  alwaysIgnorePaths,
  jsFileAnyPath,
  tsFileAnyPath,
  typescriptSupportConfig,
} from '../constants.js'


/** @type {import("eslint").Linter.Config[]} */
export const typescriptConfig = [
  {
    ignores: alwaysIgnorePaths,
  },

  ...tslint.configs.recommended,
  typescriptSupportConfig,
  {
    name: 'typescript_lint',
    files: [
      ...jsFileAnyPath,
      ...tsFileAnyPath,
    ],
    rules: {
      '@typescript-eslint/await-thenable': 'warn',
      'class-methods-use-this': 'off',
      '@typescript-eslint/class-methods-use-this': ['off', {
        exceptMethods: [],
        enforceForClassFields: false,
        ignoreOverrideMethods: true,
        ignoreClassesThatImplementAnInterface: false,
      }],
      'consistent-return': 'off',
      '@typescript-eslint/consistent-return': 'error',
      '@typescript-eslint/consistent-type-exports': 'warn',
      '@typescript-eslint/consistent-type-imports': 'warn',
      'default-param-last': 'off',
      '@typescript-eslint/default-param-last': 'error',
      '@typescript-eslint/explicit-function-return-type': ['warn', {
        allowConciseArrowFunctionExpressionsStartingWithVoid: false,
        allowDirectConstAssertionInArrowFunctions: true,
        allowedNames: [],
        allowExpressions: true,
        allowFunctionsWithoutTypeParameters: true,
        allowHigherOrderFunctions: true,
        allowIIFEs: true,
        allowTypedFunctionExpressions: true,
      }],
      '@typescript-eslint/explicit-member-accessibility': ['warn', {
        accessibility: 'no-public',
        ignoredMethodNames: [],
        overrides: {
          accessors: 'no-public',
          constructors: 'no-public',
          methods: 'no-public',
          parameterProperties: 'explicit',
          properties: 'no-public',
        },
      }],
      '@typescript-eslint/explicit-module-boundary-types': ['warn', {
        allowArgumentsExplicitlyTypedAsAny: false,
        allowDirectConstAssertionInArrowFunctions: true,
        allowedNames: [],
        allowHigherOrderFunctions: true,
        allowTypedFunctionExpressions: true,
      }],
      'init-declarations': 'off',
      '@typescript-eslint/init-declarations': ['warn', 'always'],
      'max-params': 'off',
      '@typescript-eslint/max-params': ['warn', {
        max: 3,
        countVoidThis: false,
      }],
      '@typescript-eslint/member-ordering': 'off',
      '@typescript-eslint/method-signature-style': 'off',
      // TODO: Check this rule
      // "@typescript-eslint/naming-convention": ["warn"],
      'no-array-constructor': 'off',
      '@typescript-eslint/no-array-constructor': 'error',
      '@typescript-eslint/no-array-delete': 'error',
      '@typescript-eslint/no-base-to-string': 'error',
      '@typescript-eslint/no-confusing-void-expression': ['warn', {
        ignoreArrowShorthand: true,
        ignoreVoidOperator: false,
        ignoreVoidReturningFunctions: false,
      }],
      '@typescript-eslint/no-deprecated': ['error', {
        allow: [],
      }],
      'no-dupe-class-members': 'off',
      '@typescript-eslint/no-dupe-class-members': 'off',
      '@typescript-eslint/no-duplicate-enum-values': 'error',
      '@typescript-eslint/no-duplicate-type-constituents': ['warn', {
        ignoreIntersections: true,
        ignoreUnions: false,
      }],
      '@typescript-eslint/no-dynamic-delete': 'error',
      '@typescript-eslint/no-empty-object-type': ['warn', {
        allowInterfaces: 'never',
        allowObjectTypes: 'never',
      }],
      '@typescript-eslint/no-explicit-any': ['error', {
        fixToUnknown: false,
        ignoreRestArgs: false,
      }],
      '@typescript-eslint/no-extra-non-null-assertion': 'warn',
      '@typescript-eslint/no-extraneous-class': ['warn', {
        allowConstructorOnly: true,
        allowEmpty: false,
        allowStaticOnly: false,
        allowWithDecorator: false,
      }],
      '@typescript-eslint/no-floating-promises': ['error', {
        allowForKnownSafeCalls: [],
        allowForKnownSafePromises: [],
        checkThenables: false,
        ignoreIIFE: false,
        ignoreVoid: true,
      }],
      '@typescript-eslint/no-for-in-array': 'error',
      'no-implied-eval': 'off',
      '@typescript-eslint/no-implied-eval': 'error',
      '@typescript-eslint/no-import-type-side-effects': 'error',
      'no-invalid-this': 'off',
      '@typescript-eslint/no-invalid-this': 'error',
      '@typescript-eslint/no-invalid-void-type': ['error', {
        allowAsThisParameter: false,
        allowInGenericTypeArguments: true,
      }],
      'no-loop-func': 'off',
      '@typescript-eslint/no-loop-func': 'error',
      'no-magic-numbers': 'off',
      '@typescript-eslint/no-magic-numbers': ['error', {
        ignore: [],
        ignoreArrayIndexes: true,
        ignoreDefaultValues: true,
        ignoreClassFieldInitialValues: true,
        enforceConst: true,
        detectObjects: false,
        ignoreEnums: true,
        ignoreNumericLiteralTypes: true,
        ignoreReadonlyClassProperties: true,
        ignoreTypeIndexes: true,
      }],
      '@typescript-eslint/no-meaningless-void-operator': ['warn', {
        checkNever: false,
      }],
      '@typescript-eslint/no-misused-new': 'error',
      '@typescript-eslint/no-misused-promises': ['error', {
        checksConditionals: true,
        checksSpreads: true,
        checksVoidReturn: true,
      }],
      '@typescript-eslint/no-misused-spread': ['error', {
        allow: [],
      }],
      '@typescript-eslint/no-mixed-enums': 'error',
      '@typescript-eslint/no-namespace': ['error', {
        allowDeclarations: false,
        allowDefinitionFiles: true,
      }],
      '@typescript-eslint/no-non-null-asserted-nullish-coalescing': 'error',
      '@typescript-eslint/no-non-null-asserted-optional-chain': 'error',
      '@typescript-eslint/no-non-null-assertion': 'error',
      'no-redeclare': 'off',
      '@typescript-eslint/no-redeclare': ['off', {
        builtinGlobals: true,
        ignoreDeclarationMerge: true,
      }],
      '@typescript-eslint/no-redundant-type-constituents': 'error',
      '@typescript-eslint/no-require-imports': 'off',
      'no-restricted-imports': 'off',
      '@typescript-eslint/no-restricted-imports': 'off',
      '@typescript-eslint/no-restricted-types': 'off',
      'no-shadow': 'off',
      '@typescript-eslint/no-shadow': 'off',
      '@typescript-eslint/no-this-alias': ['error', {
        allowDestructuring: false,
        allowedNames: [],
      }],
      '@typescript-eslint/no-unnecessary-boolean-literal-compare': ['error', {
        allowComparingNullableBooleansToFalse: true,
        allowComparingNullableBooleansToTrue: true,
      }],
      '@typescript-eslint/no-unnecessary-condition': ['warn', {
        allowConstantLoopConditions: false,
        checkTypePredicates: false,
      }],
      '@typescript-eslint/no-unnecessary-parameter-property-assignment': 'warn',
      '@typescript-eslint/no-unnecessary-qualifier': 'warn',
      '@typescript-eslint/no-unnecessary-template-expression': 'warn',
      '@typescript-eslint/no-unnecessary-type-arguments': 'warn',
      '@typescript-eslint/no-unnecessary-type-assertion': ['warn', {
        typesToIgnore: [],
      }],
      '@typescript-eslint/no-unnecessary-type-constraint': 'warn',
      '@typescript-eslint/no-unnecessary-type-parameters': 'warn',
      '@typescript-eslint/no-unsafe-argument': 'error',
      '@typescript-eslint/no-unsafe-assignment': 'error',
      '@typescript-eslint/no-unsafe-call': 'error',
      '@typescript-eslint/no-unsafe-declaration-merging': 'error',
      '@typescript-eslint/no-unsafe-enum-comparison': 'error',
      '@typescript-eslint/no-unsafe-function-type': 'error',
      '@typescript-eslint/no-unsafe-member-access': 'error',
      '@typescript-eslint/no-unsafe-return': 'error',
      '@typescript-eslint/no-unsafe-type-assertion': 'error',
      '@typescript-eslint/no-unsafe-unary-minus': 'error',
      'no-unused-expressions': 'off',
      '@typescript-eslint/no-unused-expressions': 'warn',
      'no-unused-vars': 'off',
      '@typescript-eslint/no-unused-vars': 'warn',
      'no-use-before-define': 'off',
      '@typescript-eslint/no-use-before-define': ['error', {
        functions: false,
        classes: true,
        variables: true,
        allowNamedExports: false,
        enums: true,
        typedefs: true,
        ignoreTypeReferences: true,
      }],
      'no-useless-constructor': 'off',
      '@typescript-eslint/no-useless-constructor': 'warn',
      '@typescript-eslint/no-useless-empty-export': 'warn',
      '@typescript-eslint/no-wrapper-object-types': 'warn',
      'no-throw-literal': 'off',
      '@typescript-eslint/only-throw-error': ['error', {
        allow: [],
        allowThrowingAny: false,
        allowThrowingUnknown: false,
      }],
      '@typescript-eslint/parameter-properties': ['off', {
        allow: [
          'readonly',
          'public',
          'protected',
          'private',
          'public readonly',
          'protected readonly',
          'private readonly',
        ],
        prefer: 'class-property',
      }],
      '@typescript-eslint/prefer-as-const': 'warn',
      'prefer-destructuring': 'off',
      '@typescript-eslint/prefer-destructuring': ['warn', {
        array: true,
        object: true,
      }],
      '@typescript-eslint/prefer-enum-initializers': 'error',
      '@typescript-eslint/prefer-literal-enum-member': ['error', {
        allowBitwiseExpressions: false,
      }],
      '@typescript-eslint/prefer-namespace-keyword': 'error',
      'prefer-promise-reject-errors': 'off',
      '@typescript-eslint/prefer-promise-reject-errors': ['error', {
        allowEmptyReject: false,
        allowThrowingAny: false,
        allowThrowingUnknown: false,
      }],
      '@typescript-eslint/prefer-readonly': ['warn', {
        onlyInlineLambdas: false,
      }],
      '@typescript-eslint/prefer-readonly-parameter-types': ['warn', {
        allow: [],
        checkParameterProperties: true,
        ignoreInferredTypes: false,
        treatMethodsAsReadonly: false,
      }],
      '@typescript-eslint/prefer-return-this-type': 'error',
      '@typescript-eslint/promise-function-async': ['warn', {
        allowAny: true,
        allowedPromiseNames: [],
        checkArrowFunctions: true,
        checkFunctionDeclarations: true,
        checkFunctionExpressions: true,
        checkMethodDeclarations: true,
      }],
      '@typescript-eslint/related-getter-setter-pairs': 'warn',
      'require-await': 'off',
      '@typescript-eslint/require-await': 'warn',
      '@typescript-eslint/restrict-plus-operands': ['error', {
        allowAny: false,
        allowBoolean: false,
        allowNullish: false,
        allowNumberAndString: false,
        allowRegExp: false,
      }],
      '@typescript-eslint/restrict-template-expressions': ['error', {
        allow: [{ name: ['Error', 'URL', 'URLSearchParams'], from: 'lib' }],
        allowAny: true,
        allowBoolean: true,
        allowNullish: true,
        allowNumber: true,
        allowRegExp: true,
      }],
      '@typescript-eslint/return-await': ['error', 'always'],
      '@typescript-eslint/strict-boolean-expressions': ['error', {
        allowAny: false,
        allowNullableBoolean: false,
        allowNullableEnum: false,
        allowNullableNumber: false,
        allowNullableObject: true,
        allowNullableString: false,
        allowNumber: true,
        allowRuleToRunWithoutStrictNullChecksIKnowWhatIAmDoing: false,
        allowString: true,
      }],
      '@typescript-eslint/switch-exhaustiveness-check': ['error', {
        allowDefaultCaseForExhaustiveSwitch: true,
        considerDefaultExhaustiveForUnions: false,
        requireDefaultForNonUnion: false,
      }],
      '@typescript-eslint/triple-slash-reference': ['error', {
        lib: 'always',
        path: 'never',
        types: 'prefer-import',
      }],
      '@typescript-eslint/typedef': ['error', {
        arrayDestructuring: false,
        arrowParameter: false,
        memberVariableDeclaration: false,
        objectDestructuring: false,
        parameter: false,
        propertyDeclaration: false,
        variableDeclaration: false,
        variableDeclarationIgnoreFunction: false,
      }],
      '@typescript-eslint/unbound-method': ['error', {
        ignoreStatic: false,
      }],
      '@typescript-eslint/unified-signatures': ['error', {
        ignoreDifferentlyNamedParameters: false,
      }],
      '@typescript-eslint/use-unknown-in-catch-callback-variable': 'warn',
    },
  },
]
